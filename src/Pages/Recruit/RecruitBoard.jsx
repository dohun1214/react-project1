import { useContext, useState } from 'react';
import { Link } from 'react-router-dom';
import { Post } from '../../components';
import { jobPostContext } from '../../contexts/';
import usePageTitle from '../../hooks/usePageTitle'

const RecruitBoard = () => {
  usePageTitle("Ï±ÑÏö©Ï†ïÎ≥¥ - JOBBLE")
  const { jobPosts } = useContext(jobPostContext);

  const [filters, setFilters] = useState({
    region: '',
    category: '',
    pay: '',
    time: '',
    search: ''
  });

  const regionOptions = ['Í∞ïÎÇ®Íµ¨', 'Í∞ïÎèôÍµ¨', 'Í∞ïÎ∂ÅÍµ¨', 'Í∞ïÏÑúÍµ¨', 'Í¥ÄÏïÖÍµ¨', 'Í¥ëÏßÑÍµ¨', 'Íµ¨Î°úÍµ¨', 'Í∏àÏ≤úÍµ¨', 'ÎÖ∏ÏõêÍµ¨', 'ÎèÑÎ¥âÍµ¨', 'ÎèôÎåÄÎ¨∏Íµ¨', 'ÎèôÏûëÍµ¨', 'ÎßàÌè¨Íµ¨', 'ÏÑúÎåÄÎ¨∏Íµ¨', 'ÏÑúÏ¥àÍµ¨', 'ÏÑ±ÎèôÍµ¨', 'ÏÑ±Î∂ÅÍµ¨', 'ÏÜ°ÌååÍµ¨', 'ÏñëÏ≤úÍµ¨', 'ÏòÅÎì±Ìè¨Íµ¨', 'Ïö©ÏÇ∞Íµ¨', 'ÏùÄÌèâÍµ¨', 'Ï¢ÖÎ°úÍµ¨', 'Ï§ëÍµ¨', 'Ï§ëÎûëÍµ¨'];
  const categoryOptions = ['Ìé∏ÏùòÏ†ê', 'ÏùåÏãùÏ†ê', 'ÏÇ¨Î¨¥ÏßÅ', 'ÏÑúÎπÑÏä§ÏóÖ', 'Í∏∞Ïà†ÏßÅ', 'Í∏∞ÌÉÄ'];
  const timeOptions = ['Ïò§Ï†Ñ', 'Ïò§ÌõÑ', 'ÌíÄÌÉÄÏûÑ', 'ÌòëÏùò ÌõÑ Í≤∞Ï†ï'];
  const payOptions = ['10,000Ïõê', '10,500Ïõê', '11,000Ïõê', '11,500Ïõê', '12,000Ïõê', '12,500Ïõê', 'ÌòëÏùò ÌõÑ Í≤∞Ï†ï'];

  const filteredPosts = jobPosts.filter(post => {
    const matchesRegion = !filters.region || post.region === filters.region;
    const matchesCategory = !filters.category || post.category === filters.category;

    const matchesPay = !filters.pay ||
      post.pay.replace(/,/g, '') === filters.pay.replace(/,/g, '');

    const matchesTime = !filters.time || post.time === filters.time;
    const matchesSearch = !filters.search ||
      post.title.toLowerCase().includes(filters.search.toLowerCase()) ||
      post.company.toLowerCase().includes(filters.search.toLowerCase()) ||
      post.content.toLowerCase().includes(filters.search.toLowerCase());

    return matchesRegion && matchesCategory && matchesPay && matchesTime && matchesSearch;
  });

  // ÌïÑÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
  const updateFilter = (key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  // ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
  const resetFilters = () => {
    setFilters({
      region: '',
      category: '',
      pay: '',
      time: '',
      search: ''
    });
  };

  const activeFiltersCount = Object.values(filters).filter(value => value !== '').length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <div className="p-6">
        <div className="max-w-6xl mx-auto mb-8">
          <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-lg border border-white/20 p-6">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
                  Ï±ÑÏö©Ï†ïÎ≥¥
                </h1>
                <p className="text-slate-600">ÏµúÏã† Ï±ÑÏö© Í≥µÍ≥†Î•º ÌôïÏù∏ÌïòÍ≥† ÏßÄÏõêÌïòÏÑ∏Ïöî</p>
              </div>
              <Link to="/recruit/new">
                <button className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 shadow-lg shadow-blue-200 hover:shadow-xl hover:shadow-blue-300 transform hover:-translate-y-0.5">
                  <span className="flex items-center gap-2">
                    <span className="text-lg">‚úèÔ∏è</span>
                    ÏÉà Í≥µÍ≥† ÏûëÏÑ±
                  </span>
                </button>
              </Link>
            </div>
          </div>
        </div>

        <div className="max-w-6xl mx-auto mb-6">
          <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-lg border border-white/20 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-slate-800 flex items-center gap-2">
                <span className="w-6 h-6 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                  <span className="text-white text-xs">üîç</span>
                </span>
                Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞
                {activeFiltersCount > 0 && (
                  <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                    {activeFiltersCount}
                  </span>
                )}
              </h3>
              {activeFiltersCount > 0 && (
                <button
                  onClick={resetFilters}
                  className="text-sm text-slate-500 hover:text-slate-700 transition-colors duration-200 flex items-center gap-1"
                >
                  <span>üîÑ</span>
                  Ï¥àÍ∏∞Ìôî
                </button>
              )}
            </div>

            <div className="mb-4">
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-slate-400 text-sm">üîç</span>
                </div>
                <input
                  type="text"
                  value={filters.search}
                  onChange={(e) => updateFilter('search', e.target.value)}
                  className="w-full pl-10 pr-4 py-3 bg-white/50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder-slate-400"
                  placeholder="ÌöåÏÇ¨Î™Ö, Ï†úÎ™©, ÎÇ¥Ïö©ÏúºÎ°ú Í≤ÄÏÉâÌïòÏÑ∏Ïöî..."
                />
              </div>
            </div>

            <div className="grid lg:grid-cols-4 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">ÏßÄÏó≠</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">üìç</span>
                  </div>
                  <select
                    value={filters.region}
                    onChange={(e) => updateFilter('region', e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-white/50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none cursor-pointer"
                  >
                    <option value="">Ï†ÑÏ≤¥ ÏßÄÏó≠</option>
                    {regionOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">‚ñº</span>
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">Ïπ¥ÌÖåÍ≥†Î¶¨</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">üè¢</span>
                  </div>
                  <select
                    value={filters.category}
                    onChange={(e) => updateFilter('category', e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-white/50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none cursor-pointer"
                  >
                    <option value="">Ï†ÑÏ≤¥ Ïπ¥ÌÖåÍ≥†Î¶¨</option>
                    {categoryOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">‚ñº</span>
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">Í∑ºÎ¨¥ÏãúÍ∞Ñ</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">‚è∞</span>
                  </div>
                  <select
                    value={filters.time}
                    onChange={(e) => updateFilter('time', e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-white/50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none cursor-pointer"
                  >
                    <option value="">Ï†ÑÏ≤¥ ÏãúÍ∞Ñ</option>
                    {timeOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">‚ñº</span>
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">Í∏âÏó¨</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">üí∞</span>
                  </div>
                  <select
                    value={filters.pay}
                    onChange={(e) => updateFilter('pay', e.target.value)}
                    className="w-full pl-10 pr-4 py-3 bg-white/50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 appearance-none cursor-pointer"
                  >
                    <option value="">Ï†ÑÏ≤¥ Í∏âÏó¨</option>
                    {payOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-slate-400 text-sm">‚ñº</span>
                  </div>
                </div>
              </div>
            </div>

            {activeFiltersCount > 0 && (
              <div className="mt-4 pt-4 border-t border-slate-200">
                <div className="flex flex-wrap gap-2">
                  <span className="text-sm text-slate-600 mr-2">ÌôúÏÑ± ÌïÑÌÑ∞:</span>
                  {filters.search && (
                    <span className="bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full flex items-center gap-1">
                      Í≤ÄÏÉâ: "{filters.search}"
                      <button
                        onClick={() => updateFilter('search', '')}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {filters.region && (
                    <span className="bg-purple-100 text-purple-800 text-sm px-3 py-1 rounded-full flex items-center gap-1">
                      ÏßÄÏó≠: {filters.region}
                      <button
                        onClick={() => updateFilter('region', '')}
                        className="text-purple-600 hover:text-purple-800"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {filters.category && (
                    <span className="bg-green-100 text-green-800 text-sm px-3 py-1 rounded-full flex items-center gap-1">
                      Ïπ¥ÌÖåÍ≥†Î¶¨: {filters.category}
                      <button
                        onClick={() => updateFilter('category', '')}
                        className="text-green-600 hover:text-green-800"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {filters.time && (
                    <span className="bg-orange-100 text-orange-800 text-sm px-3 py-1 rounded-full flex items-center gap-1">
                      ÏãúÍ∞Ñ: {filters.time}
                      <button
                        onClick={() => updateFilter('time', '')}
                        className="text-orange-600 hover:text-orange-800"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                  {filters.pay && (
                    <span className="bg-emerald-100 text-emerald-800 text-sm px-3 py-1 rounded-full flex items-center gap-1">
                      Í∏âÏó¨: {filters.pay}
                      <button
                        onClick={() => updateFilter('pay', '')}
                        className="text-emerald-600 hover:text-emerald-800"
                      >
                        √ó
                      </button>
                    </span>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="max-w-6xl mx-auto">
          <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-lg border border-white/20 overflow-hidden">
            <div className="px-6 py-4 bg-slate-50/50 border-b border-slate-100">
              <div className="flex items-center justify-between">
                <p className="text-sm text-slate-600">
                  Ï¥ù <span className="font-semibold text-blue-600">{filteredPosts.length}</span>Í∞úÏùò Ï±ÑÏö©Í≥µÍ≥†
                  {jobPosts.length !== filteredPosts.length && (
                    <span className="text-slate-500"> (Ï†ÑÏ≤¥ {jobPosts.length}Í∞ú Ï§ë)</span>
                  )}
                </p>
                {filteredPosts.length > 0 && (
                  <div className="text-xs text-slate-500">
                    ÏµúÏã†ÏàúÏúºÎ°ú Ï†ïÎ†¨Îê®
                  </div>
                )}
              </div>
            </div>

            {filteredPosts.length > 0 ? (
              <div className="divide-y divide-slate-100">
                {filteredPosts.map((item, index) => (
                  <div
                    key={item.id}
                    className="hover:bg-white/50 transition-all duration-200"
                  >
                    <Link to={`/recruit/${item.id}`}>
                      <Post id={item.id} {...item} />
                    </Link>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <span className="text-3xl text-slate-400">
                    {activeFiltersCount > 0 ? 'üîç' : 'üíº'}
                  </span>
                </div>
                <h3 className="text-xl font-semibold text-slate-600 mb-2">
                  {activeFiltersCount > 0
                    ? 'Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî Ï±ÑÏö© Í≥µÍ≥†Í∞Ä ÏóÜÏäµÎãàÎã§'
                    : 'ÏïÑÏßÅ Ï±ÑÏö© Í≥µÍ≥†Í∞Ä ÏóÜÏäµÎãàÎã§'
                  }
                </h3>
                <p className="text-slate-500 mb-6">
                  {activeFiltersCount > 0
                    ? 'Îã§Î•∏ Ï°∞Í±¥ÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏãúÍ±∞ÎÇò ÌïÑÌÑ∞Î•º Ï°∞Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî'
                    : 'Ï≤´ Î≤àÏß∏ Ï±ÑÏö© Í≥µÍ≥†Î•º ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî'
                  }
                </p>
                {activeFiltersCount > 0 ? (
                  <button
                    onClick={resetFilters}
                    className="bg-gradient-to-r from-slate-500 to-slate-600 hover:from-slate-600 hover:to-slate-700 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 mr-3"
                  >
                    ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
                  </button>
                ) : (
                  <Link to="/recruit/new">
                    <button className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200">
                      Í≥µÍ≥† ÏûëÏÑ±ÌïòÍ∏∞
                    </button>
                  </Link>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecruitBoard;